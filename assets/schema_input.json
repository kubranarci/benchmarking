{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/variantbenchmarking/master/assets/schema_input.json",
    "title": "nf-core/variantbenchmarking pipeline - params.input schema",
    "description": "Schema for the file provided with params.input",
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "test_vcf": {
                "type": "string",
                "pattern": "\\S+\\.vcf(\\.gz)?$",
                "format": "file-path",
                "errorMessage": "Test VCF must be provided, cannot contain spaces and must have extension '.vcf.gz'"
            },
            "caller": {
                "type": "string",
                "pattern": "^\\S+$",
                "errorMessage": "Name of the variant caller used to generate test file",
                "meta": ["id"]
            },
            "vartype": {
                "type": "string",
                "pattern": "^\\S+$",
                "errorMessage": "Variant type to benchmark",
                "meta": ["vartype"]
            },
            "normshift": {
                "type": "number",
                "errorMessage": "normshift is a svbenchmark parameter. Has to be between 0-1. Disallow matches if alignments between alternate alleles have normalized shift greater than normshift (default 0.2)",
                "meta": ["normshift"],
                "default": 0.2,
                "minimum": 0,
                "maximum": 1
            },
            "normdist": {
                "type": "number",
                "errorMessage": "normshift is a svbenchmark parameter. Has to be between 0-1. Disallow matches if alternate alleles have normalized edit distance greater than normdist (default 0.2)",
                "meta": ["normdist"],
                "default": 0.2,
                "minimum": 0,
                "maximum": 1
            },
            "normsizediff": {
                "type": "number",
                "errorMessage": "normsizediff is a svbenchmark parameter. Has to be between 0-1. Disallow matches if alternate alleles have normalized size difference greater than normsizediff (default 0.2)",
                "meta": ["normsizediff"],
                "default": 0.2,
                "minimum": 0,
                "maximum": 1
            },
            "maxdist": {
                "type": "integer",
                "errorMessage": "maxdist is a svbenchmark parameter. Disallow matches if positions of two variants are more than maxdist bases from each other (default 100,000).",
                "meta": ["maxdist"],
                "default": 100000
            },
            "pctsize": {
                "type": "number",
                "errorMessage": "pctsize is a truvari parameter. Has to be between 0-1. Ratio of min(base_size, comp_size)/max(base_size, comp_size).",
                "meta": ["pctsize"],
                "default": 0.7,
                "minimum": 0,
                "maximum": 1
            },
            "pctseq": {
                "type": "number",
                "errorMessage": "pctseq is a truvari parameter. Has to be between 0-1. Edit distance ratio between the REF/ALT haplotype sequences of base and comparison call. turn it off (0) for no sequence comparison.",
                "meta": ["pctseq"],
                "default": 0.7,
                "minimum": 0,
                "maximum": 1
            },
            "pctovl": {
                "type": "number",
                "errorMessage": "pctovl is a truvari parameter. Has to be between 0-1. Ratio of two calls' (overlapping bases)/(longest span)",
                "meta": ["pctovl"],
                "default": 0,
                "minimum": 0,
                "maximum": 1
            },
            "refdist": {
                "type": "integer",
                "errorMessage": "refdist is a truvari parameter. Maximum distance comparison calls must be within from base call's start/end ",
                "meta": ["refdist"],
                "default": 500
            },
            "chunksize": {
                "type": "integer",
                "errorMessage": "chunksize is a truvari parameter. Create chunks of all calls overlapping within Â±`--chunksize` basepairs",
                "meta": ["chunksize"],
                "default": 500
            },
            "pick": {
                "type": "string",
                "default": "ac",
                "enum": ["single", "ac", "multi"],
                "meta": ["pick"]
            }
        },
        "required": ["test_vcf", "caller", "vartype"]
    }
}
