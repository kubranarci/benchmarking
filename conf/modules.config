/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/${params.variant_type}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // standardization and normalization tools
    withName: "BCFTOOLS_NORM" {
        ext.prefix = { vcf.baseName - ".vcf" + ".norm"}
        ext.args   = {"--output-type z -m-any -c w" }
    }
    withName: "VARIANT_EXTRACTOR" {
        ext.prefix = { input.baseName - ".vcf" }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{.vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SVYNC {
        ext.prefix = {"${meta.id}.${meta.caller}.svync"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{.vcf.gz,vcf.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "BCFTOOLS_DEDUP" {
        ext.prefix = { vcf.baseName - ".vcf" + ".dedup"}
        ext.args   = {"--output-type z --rm-du exact -c w" }
    }
    withName: "BCFTOOLS_SORT" {
        ext.prefix = { vcf.baseName - ".vcf" + ".sort"}
        ext.args   = {"--output-type z" }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{.vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "BCFTOOLS_REHEADER" {
        beforeScript = {[
            "echo ${meta.id}",
            (meta.caller != null )? ".${meta.caller}" : "",
            " > ${meta.id}.txt"
        ].join('').trim()}
        ext.args   = { "--samples ${meta.id}.txt" }
        ext.args2   = {"--output-type z" }
        ext.prefix = { vcf.baseName - ".vcf" + ".rh"}
    }
    // splitting tools
    withName: BCFTOOLS_VIEW_SUBSAMPLE {
        ext.prefix = {  vcf.baseName - ".vcf" + ".subsample" }
        ext.args  = {"--output-type z -s ${meta.subsample}" }
    }
    withName: BCFTOOLS_VIEW_SNV {
        ext.prefix = { vcf.baseName - ".vcf" + ".snv" }
        ext.args  = {"--output-type v --types snps" }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_VIEW_INDEL {
        ext.prefix = { vcf.baseName - ".vcf" + ".indel" }
        ext.args  = {"--output-type v --types indels" }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    // filtering tools
    withName: BCFTOOLS_FILTER {
        ext.prefix = { vcf.baseName - ".vcf" + ".filter"}
        ext.args  = {[
                "--output-type v",
                (params.include_expression != null )? "--include '$params.include_expression'" : "",
                (params.exclude_expression != null )? "--exclude '$params.exclude_expression'" : ""
        ].join(' ').trim() }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess/"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SURVIVOR_FILTER {
        ext.prefix = { vcf_file.baseName - ".vcf" + ".filter"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_VIEW_FILTERMISSING {
        ext.prefix = {  vcf.baseName - ".vcf" + ".filtermiss" }
        ext.args  = {"--output-type z -e 'AC=0'" }
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
    withName: BCFTOOLS_VIEW_CONTIGS {
        ext.prefix = { vcf.baseName - ".vcf" + ".nocontigs"  }
        ext.args  = {[
                "--output-type v",
                (params.genome.contains("38"))? "-r chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22,chrX,chrY" : "-r 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y"
        ].join(' ').trim() }
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
    // Variant stats
    withName: SURVIVOR_STATS {
        ext.prefix ={["${meta.id}",
                    (meta.caller != null)      ? ".${meta.caller}" : ''
                    ].join('').trim()
                    }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/stats/survivor/"},
            pattern: "*{.stats}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_STATS {
        ext.prefix ={["${meta.id}",
                    (meta.caller != null)      ? ".${meta.caller}" : ''
                    ].join('').trim()
                    }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/stats/bcftools/"},
            pattern: "*{stats.txt}",
            mode: params.publish_dir_mode
        ]
    }
    // benchmark tools
    withName: "RTGTOOLS_FORMAT" {
        publishDir = [
            path: {"${params.outdir}/references/rtgtools"},
            pattern: "*{.sdf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "RTGTOOLS_VCFEVAL" {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        //ext.args   = {"--ref-overlap --all-record --output-mode ga4gh"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/rtgtools"},
            pattern: "*{.vcf.gz,vcf.gz.tbi,tsv.gz,txt}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "HAPPY_HAPPY" {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        //ext.args   = {""}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/happy"},
            pattern: "*{.csv.gz,csv,json.gz,json,vcf.gz,vcf.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "HAPPY_SOMPY" {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        ext.args = { meta.caller.contains("strelka") || meta.caller.contains("varscan") || meta.caller.contains("pisces") ? "--feature-table hcc.${meta.caller}.${params.variant_type} --bin-afs" : "--feature-table generic" }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/sompy"},
            pattern: "*{.csv.gz,csv,json.gz,json,vcf.gz,vcf.gz.tbi,csv}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "HAPPY_PREPY" {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}.prepy"}
        ext.args   = {"--fixchr --filter-nonref --bcftools-norm"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/preprocess"},
            pattern: "*{vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "TRUVARI_BENCH" {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        ext.args = {[
                "--sizemin 0 --sizefilt 0 --sizemax 5000000",
                (meta.pctseq != null)      ? "--pctsize ${meta.pctsize}" : '',
                (meta.pctovl != null)       ? "--pctovl ${meta.pctovl}" : '',
                (meta.pctseq != null)       ? "--pctseq ${meta.pctseq}" : '',
                (meta.refdist != null)      ? "--refdist ${meta.refdist}" : '',
                (meta.chunksize != null)    ? "--chunksize ${meta.chunksize}" : '',
                (meta.dup_to_ins)   ? "--dup-to-ins" : '',
                (meta.typeignore)   ? "--typeignore" : ''
                ].join(' ').trim()}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/truvari"},
            pattern: "*{.vcf.gz,vcf.gz.tbi,json}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SVANALYZER_SVBENCHMARK {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        ext.args = {[
                (meta.normshift != null)      ? "-normshift ${meta.normshift}" : '',
                (meta.normdist != null)       ? "-normdist ${meta.normdist}" : '',
                (meta.normsizediff != null)   ? "-normsizediff ${meta.normsizediff}" : '',
                (meta.maxdist != null)        ? "-maxdist ${meta.maxdist}" : ''
                ].join(' ').trim()}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/svanalyzer"},
            pattern: "*{.vcf.gz,tbi,distances,log,report}",
            mode: params.publish_dir_mode
        ]
    }
    withName: WITTYER {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        ext.args = {[
                "--includedFilters=''",
                (meta.evaluationmode != null)      ? "-em ${meta.evaluationmode}" : '',
                (meta.percentThreshold != null)    ? "--pt ${meta.percentThreshold}" : '',
                (meta.absoluteThreshold != null)   ? "--at ${meta.absoluteThreshold}" : '',
                (meta.bpDistance != null)          ? "--bpd ${meta.bpDistance}" : '',
                (meta.maxMatches != null)          ? "--mm ${meta.maxMatches}" : ''
                ].join(' ').trim()}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/wittyer_bench"},
            pattern: "*{.vcf.gz,tbi,json}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BAMSURGEON_EVALUATOR {
        ext.prefix = {"${meta.id}.${params.truth_id}.${meta.caller}"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${meta.id}/benchmarks/bamsurgeon"},
            pattern: "*{.vcf,stats}",
            mode: params.publish_dir_mode
        ]
    }
    // summary reports
    withName: MERGE_REPORTS {
        ext.prefix = {"${meta.benchmark_tool}"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/summary/tables/${meta.benchmark_tool}"},
            pattern: "*{csv}",
            mode: params.publish_dir_mode
        ]
    }
    withName: PLOTS {
        ext.prefix = {"${meta.benchmark_tool}"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/summary/plots/${meta.benchmark_tool}"},
            pattern: "*{png}",
            mode: params.publish_dir_mode
        ]
    }
    withName: DATAVZRD {
        ext.prefix = {"${meta.id}"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/summary/datavzrd/"},
            pattern: "*",
            mode: params.publish_dir_mode
        ]
    }
    // compare vcf results
    withName: "TABIX_BGZIP*"{
        ext.prefix = {input.toString() - ".vcf.gz"}
    }
    withName: SURVIVOR_MERGE {
        ext.prefix = {"${meta.id}.${meta.tag}"}
    }
    withName: BCFTOOLS_MERGE {
        ext.prefix = {"${meta.id}.${meta.tag}"}
        ext.args   = {"--output-type v --force-samples --force-single"}
    }
    withName: VCF_TO_CSV {
        ext.prefix = {"${meta.id}.${meta.tag}"}
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/summary/comparisons/${meta.vartype}"},
            pattern: "*{.csv}",
            mode: params.publish_dir_mode
        ]
    }
    withName: REFORMAT_HEADER {
        ext.prefix ={["${meta.id}",
                    (meta.tag != null)      ? ".${meta.tag}" : ''
                    ].join('').trim()
                    }
    }
    // liftOver
    withName: PICARD_CREATESEQUENCEDICTIONARY {
        publishDir = [
            path: {"${params.outdir}/references/dictionary"},
            pattern: "*{.dict}",
            mode: params.publish_dir_mode
        ]
    }
    withName: PICARD_LIFTOVERVCF {
        ext.prefix = {"${meta.id}"}
        ext.args = {"--WARN_ON_MISSING_CONTIG true"}
    }
    withName: BCFTOOLS_RENAME_CHR {
        ext.prefix = {"${meta.id}.renamechr"}
        ext.args   = {"--output-type z"}
        publishDir = [
            path: {"${params.outdir}/${params.truth_id}/liftover"},
            pattern: "*{.vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: UCSC_LIFTOVER {
        ext.prefix = {"${meta.id}.liftover"}
    }
    withName: SORT_BED {
        ext.prefix = {"${meta.id}.sort"}
    }
    withName: BEDTOOLS_MERGE {
        ext.prefix = {bed.toString() - ".bed" + ".merged" }
        publishDir = [
            path: {"${params.outdir}/${params.variant_type}/${params.truth_id}/liftover"},
            pattern: "*{.bed}",
            mode: params.publish_dir_mode
        ]
    }
}
//
// Don't publish results for these processes
//
process {
    withName: 'TABIX_TABIX|TABIX_BGZIP|TABIX_BGZIPTABIX|BGZIP_TABIX|SURVIVOR_MERGE|BCFTOOLS_MERGE|REFORMAT_HEADER|BCFTOOLS_NORM|BCFTOOLS_DEDUP|BCFTOOLS_REHEADER|SORT_BED|UCSC_LIFTOVER|PICARD_LIFTOVERVCF|BCFTOOLS_VIEW_SUBSAMPLE|CREATE_DATAVZRD_INPUT' {
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
}
